# -*- coding: utf-8 -*-
"""VM_Connect4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPaz60yvuqCsjS5cp1s1bhH4Y1VPPTWr
"""

def printBoard(board):
    """Displays the game board with row and column labels."""
    print("| 6 | " + " | ".join(board[5]) + " |")
    print("-----------------------------------")
    print("| 5 | " + " | ".join(board[4]) + " |")
    print("-----------------------------------")
    print("| 4 | " + " | ".join(board[3]) + " |")
    print("-----------------------------------")
    print("| 3 | " + " | ".join(board[2]) + " |")
    print("-----------------------------------")
    print("| 2 | " + " | ".join(board[1]) + " |")
    print("-----------------------------------")
    print("| 1 | " + " | ".join(board[0]) + " |")
    print("-----------------------------------")
    print("|R/C| a | b | c | d | e | f | g |")
    print("-----------------------------------")



def resetBoard():
    """Initializes and resets the game board to a 6x7 grid."""
    return [[" " for _ in range(7)] for _ in range(6)]


def validateEntry(board, col_letter):
    """Checks if the selected column is valid and not full."""
    col = ord(col_letter) - ord('a')  # Convert letter to index
    if 0 <= col < 7 and board[5][col] == " ":  # Check if the topmost row of the column is empty
        return col
    return None


def availablePositions(board):
    """Returns a list of available positions for the next move."""
    positions = []
    for col in range(7):
        for row in range(6):
            if board[row][col] == " ":
                positions.append(chr(col + ord('a')) + str(row + 1))
                break
    return positions


def availablePosition(board, col):
    """Finds the lowest available row in the specified column."""
    for row in range(0,5):
        if board[row][col] == " ":
            return row
    return None


def checkWin(board, turn):
    """Checks for a winner on the board (four in a row)."""
    # Check horizontal
    for row in range(6):
        for col in range(4):
            if all(board[row][col + i] == turn for i in range(4)):
                return True

    # Check vertical
    for col in range(7):
        for row in range(3):
            if all(board[row + i][col] == turn for i in range(4)):
                return True

    # Check diagonal (bottom-left to top-right)
    for row in range(3):
        for col in range(4):
            if all(board[row + i][col + i] == turn for i in range(4)):
                return True

    # Check diagonal (top-left to bottom-right)
    for row in range(3, 6):
        for col in range(4):
            if all(board[row - i][col + i] == turn for i in range(4)):
                return True

    return False


def checkEnd(board, turn):
    """Checks if the game has ended either due to a win or a draw."""
    if checkWin(board, turn):
        print()
        return True, f"{turn} IS THE WINNER!!!"
    elif all(board[0][col] != " " for col in range(7)):
        print()
        return True, "DRAW! NOBODY WINS!"
    return False, None


def playGame():
    """Main function to play Connect Four."""
    board = resetBoard()
    turn = 'X'  # X goes first
    print("New game: X goes first.")
    print()
    printBoard(board)

    while True:
        print()
        print(f"{turn}'s turn.")
        print(f"Where do you want your {turn} placed?")
        positions = availablePositions(board)
        print(f"Available positions are: {positions}")
        print()
        move = input("Please enter column-letter and row-number (e.g., a1): ").lower()
        print("Thank you for your selection.")

        if move in positions:
            col_letter = move[0]
            col = validateEntry(board, col_letter)

            if col is not None:
                row = availablePosition(board, col)
                if row is not None:  # Ensure a valid row is found
                    board[row][col] = turn  # Update the board with the current player's turn
                    # Check if the game has ended
                    game_over, message = checkEnd(board, turn)
                    if game_over:
                        print(message)  # Show winner or draw message
                        printBoard(board)  # Display the final board state
                        break

                    printBoard(board)  # Show updated board after each move
                    # Switch turns
                    turn = 'O' if turn == 'X' else 'X'
                else:
                    print("Invalid entry: Column is full. Try another column.")
            else:
                print("Invalid entry: Column is full or out of bounds. Try again.")
        else:
            print("Invalid move. Please choose a valid position.")

    print()
    another_game = input("Another game (y/n)? ").strip().lower()
    if another_game == 'y':
        playGame()
    else:
        print("Thank you for playing!")


# Start the game
playGame()

