# -*- coding: utf-8 -*-
"""VM_Tic_Tac_Toe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s3YwyryVhZ8RKJQeW-tWm8UdNH5VOm7A
"""

def printBoard(board):
    """Displays the game board."""
    print("--------------------")
    print("|R\\C| 0 | 1 | 2 |")
    print("--------------------")
    for s in range(3):
        print(f"| {s} |", end="")
        for k in range(3):
            print(f" {board[s][k]} |", end="")
        print()
        print("--------------------")  # New line after each row

def resetBoard():
    """Initializes and resets the game board."""
    return [[" " for _ in range(3)] for _ in range(3)]

def validateEntry(s, k, board):
    """Checks if the entered row and column are valid."""
    if 0 <= s < 3 and 0 <= k < 3 and board[s][k] == " ":
        return True
    return False

def checkFull(board):
    """Returns True if the board is full, otherwise False."""
    for s in board:
        if " " in s:
            return False
    return True

def checkWin(board, turn):
    """Checks for a winner on the board."""
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(board[i][j] == turn for j in range(3)):  # Check rows
            return True
        if all(board[j][i] == turn for j in range(3)):  # Check columns
            return True
    if all(board[i][i] == turn for i in range(3)):  # Check main diagonal
        return True
    if all(board[i][2 - i] == turn for i in range(3)):  # Check anti diagonal
        return True
    return False

def checkEnd(board, turn):
    """Checks if the game has ended either due to a win or a draw."""
    if checkWin(board, turn):
        print(f"{turn} IS THE WINNER!!!")
        return True
    elif checkFull(board):
        print()
        print("DRAW! NOBODY WINS!")
        return True
    return False

def playGame():
    """Main function to play the Tic-Tac-Toe game."""
    board = resetBoard()  # Reset the game board
    turn = 'X'  # X goes first

    print("New Game: X goes first.")
    print()
    printBoard(board)
    while True:
        print()
        print(f"{turn}'s turn.")
        move = input("Where do you want your " + turn + " placed?\nPlease enter row number and column number separated by a comma.\n")

        try:
            row, col = map(int, move.split(','))  # Get user input
            # Print the user's entry
            print(f"You have entered row #{row}\n          and column #{col}")

            if validateEntry(row, col, board):
                print("Thank You for your selection.")
                board[row][col] = turn  # Update board with the current player's turn

                # Check if the game has ended
                if checkEnd(board, turn):
                    printBoard(board)  # Display the board after winner/draw statement
                    break

                printBoard(board)  # Show updated board after the move

                # Switch turns
                turn = 'O' if turn == 'X' else 'X'
            else:
                # Show the error message if the move is invalid
                if row not in range(3) or col not in range(3):
                    print("Invalid entry: try again.\nRow & column numbers must be either 0, 1, or 2.")
                elif board[row][col] != " ":
                    print("That cell is already taken.\nPlease make another selection.")

        except ValueError:
            print("Invalid input: Please enter numbers separated by a comma.")
            continue

    # Ask to play another game
    print()
    another_game = input("Another game? Enter Y or y for yes.\n").strip().lower()
    if another_game == 'y':
        playGame()
    else:
        print("Thank You for Playing!")  # End the game

# Start the game
playGame()